{
    "Comment": "A state machine that does mock Face Comparison.",
    "StartAt": "ProcessTasksMappedTask",
    "States": {
      "ProcessTasksMappedTask": {
        "Type": "Map",
        "MaxConcurrency": 50,
        "ResultPath": null,
        "ItemProcessor": {
          "ProcessorConfig": {
            "Mode": "DISTRIBUTED",
            "ExecutionType": "STANDARD"
          },
          "StartAt": "CompareImagesStep",
          "States": {
            "CompareImagesStep": {
              "Type": "Task",
              "Resource": "${CompareImagesFunctionArn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "ProcessTaskErrorFallback"
                }
              ],
              "Next": "CheckIfMatchFound"
            },
            "CheckIfMatchFound": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.hasResults",
                  "BooleanEquals": true,
                  "Next": "Record Transaction"
                },
                {
                  "Variable": "$.hasResults",
                  "BooleanEquals": false,
                  "Next": "Skip"
                }
              ]
            },
            "Skip": {
              "Type": "Succeed"
            },
            "Record Transaction": {
              "Type": "Task",
              "Resource": "${DDBPutItem}",
              "Parameters": {
                "TableName": "${DDBTable}",
                "Item": {
                  "SourceImage": {
                    "S.$": "$.sourceImage"
                  },
                  "BatchID": {
                    "S.$": "States.UUID()"
                  },
                  "Result": {
                    "S.$": "States.JsonToString($.results)"
                  }
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 20,
                  "MaxAttempts": 5,
                  "BackoffRate": 10
                }
              ],
              "End": true
            },
            "ProcessTaskErrorFallback": {
              "Type": "Fail",
              "Cause": "Error when processing a task"
            }
          }
        },
        "Next": "CopyObject",
        "Label": "ProcessTasksMappedTask",
        "ItemReader": {
          "Resource": "arn:aws:states:::s3:listObjectsV2",
          "Parameters": {
            "Bucket": "${TargetBucketName}"
          }
        },
        "ItemSelector": {
          "sourceImage.$": "$.detail.object.key",
          "targetImage.$": "$$.Map.Item.Value.Key",
          "targetBucket": "${TargetBucketName}",
          "sourceBucket": "${UploadBucketName}"
        },
        "ItemBatcher": {
          "MaxItemsPerBatch": 50
        }
      },
      "CopyObject": {
        "Type": "Task",
        "ResultPath": null,
        "Next": "DeleteObject",
        "Parameters": {
          "Bucket": "${ProcessedBucketName}",
          "CopySource.$": "States.Format('{}/{}',$.detail.bucket.name, $.detail.object.key)",
          "Key.$": "$.detail.object.key"
        },
        "Resource": "arn:aws:states:::aws-sdk:s3:copyObject"
      },
      "DeleteObject": {
        "Type": "Task",
        "End": true,
        "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
        "Parameters": {
          "Bucket": "${UploadBucketName}",
          "Key.$": "$.detail.object.key"
        }
      }
    }
  }